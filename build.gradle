plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.0'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'jacoco'
    id 'org.sonarqube' version '3.3'
}

group = 'com.juno'
version = '1.0'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    asciidoctorExtensions
}

repositories {
    mavenCentral()
}

ext {
    snippetsDir = file('build/generated-snippets')
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:mysql'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.security:spring-security-test'

    compileOnly group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.2'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.2'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.2'
    testImplementation group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.2'
    testImplementation group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.2'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis-reactive'
    testImplementation 'io.projectreactor:reactor-test'
    implementation "org.testcontainers:testcontainers:1.18.1"
    implementation 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:3.3'

    // Bill Of Materials (bom) 추가
    // https://mvnrepository.com/artifact/software.amazon.awssdk/bom
    implementation platform('software.amazon.awssdk:bom:2.17.230')
    // AWS s3 추가
    implementation 'software.amazon.awssdk:s3'

    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'

    testImplementation 'com.squareup.okhttp3:okhttp:4.0.1'
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.0.1'

    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'

    implementation 'org.springframework.data:spring-data-envers'
}

tasks.named('test') {
    outputs.dir snippetsDir
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport'
}

tasks.named('asciidoctor') {
    inputs.dir snippetsDir
    dependsOn test
}

// jacoco
jacoco {
    toolVersion = '0.8.8'
}

jacocoTestReport {
    reports {
        xml.enabled true    // sonarqube 분석
        csv.enabled false
        html.enabled false

        xml.destination file("${buildDir}/jacoco/index.xml")
        csv.destination file("${buildDir}/jacoco/index.csv")
        html.destination file("${buildDir}/jacoco/index.html")
    }

    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, excludes: [
                            '**/*Application*',
                            '**/*Exception*',
                            '**/*Advice*',
                            '**/enums/**',
                            '**/api/**',
                            '**/request/**',
                            '**/response/**',
                            '**/global/**',
                            '**/domain/**',
                            // ...
                    ])
                })
        )
    }

    finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true
            element = 'CLASS'

            excludes = [
                    '*.*Application',
                    '*.*Exception',
                    '*.*Advice',
                    '*.request.*',
                    '*.response.*',
                    '*.enums.*',
                    '*.api.*',
                    '*.global.*',
                    '*.security.*',
                    '*.domain.*',
                    '*.domain.*.Q*',
                    '*.*CustomRepository',
            ]

            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 0.80
            }
        }

        rule {
            enabled = true
            element = 'CLASS'

            excludes = [
                    '*.*Application',
                    '*.*Exception',
                    '*.*Advice',
                    '*.request.*',
                    '*.response.*',
                    '*.enums.*',
                    '*.api.*',
                    '*.global.*',
                    '*.security.*',
                    '*.domain.*',
                    '*.domain.*.Q*',
                    '*.*CustomRepository',
            ]

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.80
            }
        }
    }
}

sonarqube {
    properties {
        property "sonar.host.url", "http://39.118.30.247:9000/"
        property "sonar.sources", "src"
        property "sonar.language", "java"
        property "sonar.projectKey", "appling-api"
        property "sonar.projectName", "appling-api-prod"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.java.binaries", "${buildDir}/classes"
        property "sonar.test.inclusions", "**/*Test.java, **/*Docs.java"
        property "sonar.exclusions", "**/resources/static/**, **/Q*.class, **/test/**, **/security/**, **/webconfig/**"
        property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/jacoco/index.xml"
    }
}

asciidoctor {
    configurations 'asciidoctorExtensions'
    baseDirFollowsSourceFile()
    inputs.dir snippetsDir
    dependsOn test
}

asciidoctor.doFirst {
    delete file('src/main/resources/static/docs')
}

task copyDocument(type: Copy) {
    dependsOn asciidoctor

    from "${asciidoctor.outputDir}"
    into file("src/main/resources/static/docs")
}

bootJar {
    dependsOn copyDocument
}